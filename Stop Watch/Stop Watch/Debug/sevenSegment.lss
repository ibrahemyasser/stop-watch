
sevenSegment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ae  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000532  00000000  00000000  00000762  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000213  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00000ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000300  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001249  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_7>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_7>:
#include <util/delay.h>
#include <avr/io.h>
#include <avr/interrupt.h>

void timer1_init();
ISR (TIMER1_COMPA_vect){
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25
	PORTC ^= 0x07;
  7a:	95 b3       	in	r25, 0x15	; 21
  7c:	87 e0       	ldi	r24, 0x07	; 7
  7e:	89 27       	eor	r24, r25
  80:	85 bb       	out	0x15, r24	; 21
	
	
}
  82:	9f 91       	pop	r25
  84:	8f 91       	pop	r24
  86:	0f 90       	pop	r0
  88:	0f be       	out	0x3f, r0	; 63
  8a:	0f 90       	pop	r0
  8c:	1f 90       	pop	r1
  8e:	18 95       	reti

00000090 <timer1_init>:

    }
}
void timer1_init(){
	// enables OCF1A (output compare match flag)
	TIFR |= (1<<4);
  90:	88 b7       	in	r24, 0x38	; 56
  92:	80 61       	ori	r24, 0x10	; 16
  94:	88 bf       	out	0x38, r24	; 56
	//enables OCIE1A (output compare match interrupt enable)
	TIMSK |= (1<<4);
  96:	89 b7       	in	r24, 0x39	; 57
  98:	80 61       	ori	r24, 0x10	; 16
  9a:	89 bf       	out	0x39, r24	; 57
	// enable global interrupt
	sei();
  9c:	78 94       	sei
	// CTC mode with prescaler 256
	TCCR1A = 0x00;
  9e:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |=  (1<<2) | (1<<3);
  a0:	8e b5       	in	r24, 0x2e	; 46
  a2:	8c 60       	ori	r24, 0x0C	; 12
  a4:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 31249;
  a6:	81 e1       	ldi	r24, 0x11	; 17
  a8:	9a e7       	ldi	r25, 0x7A	; 122
  aa:	9b bd       	out	0x2b, r25	; 43
  ac:	8a bd       	out	0x2a, r24	; 42
  ae:	08 95       	ret

000000b0 <main>:
	
}
int main(void)
{
    /* Replace with your application code */
	DDRC |= (1<<0) | (1<<1) | (1<<2);
  b0:	84 b3       	in	r24, 0x14	; 20
  b2:	87 60       	ori	r24, 0x07	; 7
  b4:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  b6:	15 ba       	out	0x15, r1	; 21
	timer1_init();
  b8:	0e 94 48 00 	call	0x90	; 0x90 <timer1_init>
  bc:	ff cf       	rjmp	.-2      	; 0xbc <main+0xc>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
